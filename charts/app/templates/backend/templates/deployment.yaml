{{- if .Values.backendSites.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backendSites.fullname" . }}
  labels:
    {{- include "backendSites.labels" . | nindent 4 }}
spec:
  strategy:
    type: {{ .Values.backendSites.deploymentStrategy }}
  {{- if not .Values.backendSites.autoscaling.enabled }}
  replicas: {{ .Values.backendSites.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "backendSites.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
      labels:
        {{- include "backendSites.labels" . | nindent 8 }}
    spec:
      {{- if .Values.backendSites.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.backendSites.podSecurityContext | nindent 12 }}
      {{- end }}
      initContainers: # The container that will do the initial database seed and migrations.
        - name: {{ include "backendSites.fullname" . }}-init
          image: "{{.Values.global.registry}}/{{.Values.global.repository}}/backend-migration:{{ .Values.global.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ default "Always" .Values.backendSites.imagePullPolicy }}
          {{- if not .Values.crunchy.enabled }}
          envFrom:
            - secretRef:
                name: {{.Release.Name}}-backend-migrations
          {{- else }}
          env:
            - name: POSTGRES_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRES_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: user
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  key: dbname
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRES_DB_SCHEMA
              value: {{ .Values.global.config.schemaName }}
            - name: POSTGRESQL_HOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRESQL_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRES_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRES_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  key: user
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
          {{- end }}
          resources: # this is optional
            limits:
              cpu: {{ .Values.backendSites.resources.limits.cpu }}
              memory: {{ .Values.backendSites.resources.limits.memory }}
            requests:
              cpu: {{ .Values.backendSites.resources.requests.cpu }}
              memory: {{ .Values.backendSites.resources.requests.memory }}
      containers:
        - name: {{ include "backendSites.fullname" . }}
          {{- if .Values.backendSites.securityContext }}
          securityContext:
            {{- toYaml .Values.backendSites.securityContext | nindent 12 }}
          {{- end }}
          image: "{{.Values.global.registry}}/{{.Values.global.repository}}/backend:{{ .Values.global.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ default "Always" .Values.backendSites.imagePullPolicy }}
          envFrom:
            - secretRef:
                name: {{.Release.Name}}-backend
          env:
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FILE_LOCATION
              value: "/logs/sites-%DATE%.log"
            - name: LOG_FILE_MAX_SIZE
              value: "25m"
            - name: LOG_FILE_MAX_FILES
              value: "7d"
            - name: PORT
              value: {{ .Values.backendSites.service.targetPort | quote }}
            - name: GRAPHQL_SCHEMA_FILE_PATH
              value: "/graphql/schema.graphql"
          {{- if .Values.crunchy.enabled }}
            - name: POSTGRES_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRES_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: user
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  key: dbname
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRES_DB_SCHEMA
              value: {{ .Values.global.config.schemaName }}
            - name: POSTGRESQL_HOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRESQL_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRES_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
            - name: POSTGRES_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  key: user
                  name: {{.Release.Name}}-crunchy-pguser-{{ .Values.global.config.dbName }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.backendSites.service.targetPort }}
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: {{ .Values.backendSites.service.targetPort }}
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 30
          livenessProbe:
            successThreshold: 1
            failureThreshold: 3
            tcpSocket:
              port: {{ .Values.backendSites.service.targetPort }}
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
          resources: # this is optional
            limits:
              cpu: {{ .Values.backendSites.resources.limits.cpu }}
              memory: {{ .Values.backendSites.resources.limits.memory }}
            requests:
              cpu: {{ .Values.backendSites.resources.requests.cpu }}
              memory: {{ .Values.backendSites.resources.requests.memory }}
          volumeMounts:
            - mountPath: /logs
              name: log-storage
            - mountPath: /graphql
              name: graphql-storage
      volumes:
        - name: log-storage
          emptyDir: {}
        - name: graphql-storage
          emptyDir: {}
      {{- with .Values.backendSites.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backendSites.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - {{ include "backendSites.fullname" . }}
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"

{{- end }}
